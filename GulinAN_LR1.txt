Отчёт по лабораторной работе №1.
Ход работы.
1. Установка Git с сайта git-scm.com

2. Первоначальная настройка с помощью команд 
git config --global user.name "Gulin Alexey"
и
git config --global user.email "gulin-2001@mail.ru"
(Указание имени пользователя и электронной почты для всех проектов)

3. Создание проекта
cd C:\MyProjects
(переход в папку с проектами)
mkdir git-first
(создание папки с проектом)
cd git-first
(переход в папку с проектом)
git init
(создание репозитория)

4. Первый файл
nano GulinAN_LR1.txt
(создание файла с отчётом)
git add GulinAN_LR1.txt
(добавление страницы в репозиторий, индексация)
git commit -m "Первый коммит"
(первый коммит)

5. Изменение кодировки с UTF-8 на Windows-1251 для читаемости отчёта и третий коммит

6. История коммитов
Ввод команды:
git log
Результат:

commit e1774ece8cf3098d85e0296ddbed318951812c1e (HEAD -> master)
Author: Gulin Alexey <gulin-2001@mail.ru>
Date:   Mon Sep 14 02:24:03 2020 +0700

    Коммит 4, исправление неточностей в отчёте

commit 5396cd4e8685497281e0e4555400fab1bcf85cb3
Author: Gulin Alexey <gulin-2001@mail.ru>
Date:   Mon Sep 14 02:07:01 2020 +0700

    Третий коммит (исправленный второй)

commit 86478b6e9d78e9bade9b43ae62d4d01ecd95eb7f
Author: Gulin Alexey <gulin-2001@mail.ru>
Date:   Mon Sep 14 01:59:52 2020 +0700

    Второй коммит

commit b1416108768019952308489d4c24b1d7794e94e0
Author: Gulin Alexey <gulin-2001@mail.ru>
Date:   Mon Sep 14 01:42:17 2020 +0700

    Первый коммит

Ввод команды на однострочный формат истории коммитов:
git log --pretty=oneline
Результат:
e1774ece8cf3098d85e0296ddbed318951812c1e (HEAD -> master) Коммит 4, исправление неточностей в отчёте
5396cd4e8685497281e0e4555400fab1bcf85cb3 Третий коммит (исправленный второй)
86478b6e9d78e9bade9b43ae62d4d01ecd95eb7f Второй коммит
b1416108768019952308489d4c24b1d7794e94e0 Первый коммит

7. Перемещение и удаление файлов
Команды для создания в директории файла, папки и дальнейшего перемещения:
cd C:\MyProjects
cd git-first
nano text1.txt
mkdir lib
mv text1.txt lib

Команда для удаления из репозитория лишнего случайного файла, созданного в начале работы (сам файл удалён вручную):
git rm Гулин_А_Н_ЛР1.txt

Результат:
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   lib/text1.txt
        deleted:    "\320\223\321\203\320\273\320\270\320\275_\320\220_\320\235_\320\233\320\2401.txt"

8. Сравнение файлов

Пример использования:
diff --git a/test.txt b/test.txt

9. Игнорирование файлов
.gitignore - это простой текстовый файл, в каждой строке которого содержится шаблон файла или каталога, который необходимо проигнорировать.
Пример .gitignore:
# Игнорировать каталог node_modules 
node_modules/ 

# Игнорирование логов 
logs 
*.log 

# Игнорирование каталога со сборкой проекта
/dist  

# Игнорирование файла содержащий переменные окружения  
.env 

# Игнорирование файлов специфичных для IDE 
.idea/ 
.vscode/ 
*.sw*

10. Отмена нежелательного коммита с помощью другого коммита:
git revert HEAD

11. Работа с метками (тегами)
 git tag v1
(установление метки для текущей версии)
После изменения файлов и нового коммита соответственно
git tag v2
Для возвращения к старой метке:
git checkout v1